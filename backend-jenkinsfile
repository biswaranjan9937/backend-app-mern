def timestamp = new Date().format('yyyyMMdd-HHmmss')
pipeline {
    agent any

    environment {
        AWS_REGION     = 'ap-south-1'
        ECR_REPO       = '663880399834.dkr.ecr.ap-south-1.amazonaws.com'
        IMAGE_NAME     = 'poc-ecr-backend'
        ONLY_YAML_PATH = 'EKS-MERN-Project/DevOps/Kubernetes-Manifests/Backend/deployment.yaml'
        SKIP_PIPELINE_FILE = 'skip_pipeline_flag.txt'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                deleteDir()
            }
        }

        stage('Checkout Code') {
            steps {
                git url: 'https://github.com/biswaranjan9937/backend-app-mern.git', branch: 'main'
                script {
                    echo "Global timestamp: ${timestamp}"   
                }
            }
        }
        
        stage('Check for Code Changes') {
            steps {
                script {
                    def changedFiles = sh(script: 'git diff --name-only HEAD~1 HEAD', returnStdout: true).trim().split("\n")
                    echo "Changed files: ${changedFiles}"

                    if (changedFiles.size() == 1 && changedFiles[0] == env.ONLY_YAML_PATH) {
                        echo "âœ… Only ${env.ONLY_YAML_PATH} was changed. Skipping full pipeline."
                        writeFile file: env.SKIP_PIPELINE_FILE, text: 'true'
                    } else {
                        echo "ðŸ”„ Other files changed. Proceeding with pipeline."
                        writeFile file: env.SKIP_PIPELINE_FILE, text: 'false'
                    }
                }
            }
        }

        stage('AWS ECR Login') {
            when {
                expression {
                    return fileExists(env.SKIP_PIPELINE_FILE) && readFile(env.SKIP_PIPELINE_FILE).trim() != 'true'
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                        export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            when {
                expression {
                    return fileExists(env.SKIP_PIPELINE_FILE) && readFile(env.SKIP_PIPELINE_FILE).trim() != 'true'
                }
            }
            steps {
                dir('EKS-MERN-Project/backend') {
                    script {
                        def fullTag = "${env.ECR_REPO}/${env.IMAGE_NAME}:${timestamp}"
                        sh "docker build -t ${fullTag} -f Dockerfile-Backend ."
                    }
                }
            }
        }

        // stage('Tag Docker Image') {
        //     steps {
        //         sh 'docker tag ${IMAGE_NAME}:latest ${ECR_REPO}:latest'
        //     }
        // }

        stage('Push to ECR') {
            when {
                expression {
                    return fileExists(env.SKIP_PIPELINE_FILE) && readFile(env.SKIP_PIPELINE_FILE).trim() != 'true'
                }
            }
            steps {
                script {
                    def fullTag = "${env.ECR_REPO}/${env.IMAGE_NAME}:${timestamp}"
                    sh "docker push ${fullTag}"
                }
            }
        }
        stage('Delete Images from Jenkins server') {
            when {
                expression {
                    return fileExists(env.SKIP_PIPELINE_FILE) && readFile(env.SKIP_PIPELINE_FILE).trim() != 'true'
                }
            }
            steps {
                sh 'docker image prune -a -f'
            }
        }
        stage('Update Manifest and Push to GitHub') {
            when {
                expression {
                    return fileExists(env.SKIP_PIPELINE_FILE) && readFile(env.SKIP_PIPELINE_FILE).trim() != 'true'
                }
            }
            steps {
                script {
                    // def timestamp = new Date().format("yyyyMMdd-HHmmss")
                    def newImage = "${env.ECR_REPO}/${env.IMAGE_NAME}:${timestamp}"
                    def manifestPath = 'EKS-MERN-Project/DevOps/Kubernetes-Manifests/Backend/deployment.yaml'
        
                    // Corrected sed command
                    sh "sed -i \"s|image: .*|image: ${newImage}|\" ${manifestPath}"
        
                    // Git commit and push
                    withCredentials([usernamePassword(credentialsId: 'github-creds', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh "git config user.name 'jenkins'"
                        sh "git config user.email 'jenkins@local'"
                        sh "git add ${manifestPath}"
                        sh "git commit -m 'Update image tag of backend application to ${timestamp}' || echo 'Nothing to commit'"
                        sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/biswaranjan9937/backend-app-mern.git HEAD:main"
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def skipped = fileExists(env.SKIP_PIPELINE_FILE) ? readFile(env.SKIP_PIPELINE_FILE).trim() == 'true' : false
                if (skipped) {
                    echo "âœ… Post: Pipeline was skipped due to only deployment.yaml changes."
                } else {
                    echo "âœ… Post: Pipeline ran full stages."
                }
            }
        }
    }
}
